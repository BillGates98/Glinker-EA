[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "URIRef",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "rdflib",
        "description": "rdflib",
        "isExtraImport": true,
        "detail": "rdflib",
        "documentation": {}
    },
    {
        "label": "StringSimilarity",
        "importPath": "string_similarity",
        "description": "string_similarity",
        "isExtraImport": true,
        "detail": "string_similarity",
        "documentation": {}
    },
    {
        "label": "Word2Vec",
        "importPath": "gensim.models",
        "description": "gensim.models",
        "isExtraImport": true,
        "detail": "gensim.models",
        "documentation": {}
    },
    {
        "label": "OWL",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "OWL",
        "importPath": "rdflib.namespace",
        "description": "rdflib.namespace",
        "isExtraImport": true,
        "detail": "rdflib.namespace",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "rdflib_to_networkx_multidigraph",
        "importPath": "rdflib.extras.external_graph_libs",
        "description": "rdflib.extras.external_graph_libs",
        "isExtraImport": true,
        "detail": "rdflib.extras.external_graph_libs",
        "documentation": {}
    },
    {
        "label": "rdflib_to_networkx_multidigraph",
        "importPath": "rdflib.extras.external_graph_libs",
        "description": "rdflib.extras.external_graph_libs",
        "isExtraImport": true,
        "detail": "rdflib.extras.external_graph_libs",
        "documentation": {}
    },
    {
        "label": "TriplesFactory",
        "importPath": "pykeen.triples",
        "description": "pykeen.triples",
        "isExtraImport": true,
        "detail": "pykeen.triples",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "pykeen.pipeline",
        "description": "pykeen.pipeline",
        "isExtraImport": true,
        "detail": "pykeen.pipeline",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "importPath": "compute_files",
        "description": "compute_files",
        "isExtraImport": true,
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "embeddings",
        "description": "embeddings",
        "isExtraImport": true,
        "detail": "embeddings",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "embeddings",
        "description": "embeddings",
        "isExtraImport": true,
        "detail": "embeddings",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "isExtraImport": true,
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "validators",
        "description": "validators",
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "cm",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "cm",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "cm",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "LinearLocator",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "FormatStrFormatter",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "LinearLocator",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "FormatStrFormatter",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "LinearLocator",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "FormatStrFormatter",
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "isExtraImport": true,
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "griddata",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "griddata",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "griddata",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ComputeFile",
        "kind": 6,
        "importPath": "compute_files",
        "description": "compute_files",
        "peekOfCode": "class ComputeFile:\n    def __init__(self, input_path='', output_path=''):\n        self.input_path = input_path\n        self.output_path = output_path\n        self.input_files = []\n        self.output_files = []\n        self.extensions = ['.ttl', '.nt', '.rdf', '.owl', '.csv']\n    def build_graph(self, input_file=''):\n        graph = Graph()\n        graph.parse(input_file, format=get_format(value=input_file))",
        "detail": "compute_files",
        "documentation": {}
    },
    {
        "label": "DeepSimilarity",
        "kind": 6,
        "importPath": "deep_similarity",
        "description": "deep_similarity",
        "peekOfCode": "class DeepSimilarity:\n    def __init__(self, code=''):\n        # print('Deep String Similarity')\n        self.code = code\n    def bill_sim(self, value1='', value2=''):\n        if len(value1.lstrip()) > 0 and len(value2.lstrip()) > 0:\n            return StringSimilarity(source=value1, target=value2).run()\n        return 0.0\n    def jaro_similarity(self, value1='', value2=''):\n        def jaro_winkler_distance(s1, s2):",
        "detail": "deep_similarity",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "kind": 6,
        "importPath": "embeddings",
        "description": "embeddings",
        "peekOfCode": "class Embedding:\n    def __init__(self, file='', graph=None, dimension=200, model_name=''):\n        self.file = file\n        self.graph = graph\n        self.dimension = dimension\n        self.model_name = model_name\n    def load_file(self):\n        if self.graph == None:\n            g = Graph()\n            g.parse(self.file)",
        "detail": "embeddings",
        "documentation": {}
    },
    {
        "label": "FeatureBuilding",
        "kind": 6,
        "importPath": "features",
        "description": "features",
        "peekOfCode": "class FeatureBuilding: \n    def __init__(self, input_path='', output_path='', suffix='', algo='', dimension=10):\n        self.input_path = input_path + suffix + '/'\n        self.output_path = output_path\n        self.suffix = suffix\n        self.dimension = dimension\n        self.algo = algo\n        files = ComputeFile(input_path=self.input_path).build_list_files()\n        self.source_file = self.filter(keyword='source', all=files)\n        self.target_file = self.filter(keyword='target', all=files)",
        "detail": "features",
        "documentation": {}
    },
    {
        "label": "Linking",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Linking:\n    def __init__(self, cpu=10, source_file='', target_file='', truth_file='', output_file='', suffix='', embedding_name='r2v', dimension=200, alpha=0.0, beta=0.0, similarity_measure=''):\n        self.source_file = source_file\n        self.target_file = target_file\n        self.truth_file = truth_file\n        self.output_file = output_file\n        self.suffix = suffix\n        self.dimension = dimension\n        self.embedding_name = embedding_name\n        self.alpha = alpha",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "start_time = time.time()\nclass Linking:\n    def __init__(self, cpu=10, source_file='', target_file='', truth_file='', output_file='', suffix='', embedding_name='r2v', dimension=200, alpha=0.0, beta=0.0, similarity_measure=''):\n        self.source_file = source_file\n        self.target_file = target_file\n        self.truth_file = truth_file\n        self.output_file = output_file\n        self.suffix = suffix\n        self.dimension = dimension\n        self.embedding_name = embedding_name",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Optimization",
        "kind": 6,
        "importPath": "optimization copy",
        "description": "optimization copy",
        "peekOfCode": "class Optimization:\n    def __init__(self, truth_file='', output_file='', suffix=''):\n        self.truth_file = truth_file\n        self.alignment_file = output_file\n        self.suffix = suffix\n        self.step = 0.01\n    def load_graph(self, file=''):\n        graph = Graph()\n        graph.parse(file)\n        return graph",
        "detail": "optimization copy",
        "documentation": {}
    },
    {
        "label": "Optimization",
        "kind": 6,
        "importPath": "optimization",
        "description": "optimization",
        "peekOfCode": "class Optimization:\n    def __init__(self, truth_file='', output_file='', suffix=''):\n        self.truth_file = truth_file\n        self.alignment_file = output_file\n        self.suffix = suffix\n        self.step = 0.01\n    def load_graph(self, file=''):\n        graph = Graph()\n        graph.parse(file)\n        return graph",
        "detail": "optimization",
        "documentation": {}
    },
    {
        "label": "Optimization",
        "kind": 6,
        "importPath": "optimization_ablation",
        "description": "optimization_ablation",
        "peekOfCode": "class Optimization:\n    def __init__(self, truth_file='', output_file='', suffix=''):\n        self.truth_file = truth_file\n        self.alignment_file = output_file\n        self.suffix = suffix\n        self.step = 0.01\n    def load_graph(self, file=''):\n        graph = Graph()\n        graph.parse(file)\n        return graph",
        "detail": "optimization_ablation",
        "documentation": {}
    },
    {
        "label": "StringSimilarity",
        "kind": 6,
        "importPath": "string_similarity",
        "description": "string_similarity",
        "peekOfCode": "class StringSimilarity:\n    def __init__(self, source='', target=''):\n        # print('Bill Similarity')\n        self.symbols = [] if len(alphabet) == 0 else alphabet\n        self.source = source.lower()\n        self.target = target.lower()\n    def symbol_vector(self, value=''):\n        output = np.zeros(len(self.symbols))\n        output[self.symbols.index(value)] = 1\n        return output",
        "detail": "string_similarity",
        "documentation": {}
    },
    {
        "label": "alphabet",
        "kind": 5,
        "importPath": "string_similarity",
        "description": "string_similarity",
        "peekOfCode": "alphabet = list(string.printable)\nclass StringSimilarity:\n    def __init__(self, source='', target=''):\n        # print('Bill Similarity')\n        self.symbols = [] if len(alphabet) == 0 else alphabet\n        self.source = source.lower()\n        self.target = target.lower()\n    def symbol_vector(self, value=''):\n        output = np.zeros(len(self.symbols))\n        output[self.symbols.index(value)] = 1",
        "detail": "string_similarity",
        "documentation": {}
    }
]